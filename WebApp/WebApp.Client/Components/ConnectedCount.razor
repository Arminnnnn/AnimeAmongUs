@rendermode InteractiveWebAssembly
@namespace Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

@if (IsConnected)
{
    <h1>Player count: @_playerCount</h1>
    <div class="mt-5 me-5 d-flex flex-column align-items-center">
        <h4 class="text-white">Buzzer:</h4>
        @if (!_buttonState)
        {
            <img src="icons/buzzer-button-green.svg" width="120" alt="buzzer not pressed" @onclick="ButtonClicked"/>
        }
        else
        {
            <img src="icons/buzzer-button-red.svg" width="120" alt="buzzer pressed" @onclick="ButtonUndo"/>
        }
    </div>
}
else
{
    <h1>Player count: ERROR</h1>
}

@code {
    private HubConnection? _hubConnection;
    private int _playerCount;
    private bool _buttonState;
    
    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/connectedHub"))
            .Build();

        _hubConnection.On<int, bool>("OnConnected", (playerCount, buttonState) =>
        {
            _playerCount = playerCount;
            _buttonState = buttonState;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task ButtonClicked()
    {
        try
        {
            if (_hubConnection != null)
            {
                await _hubConnection.SendAsync("ButtonClicked");
            }
        }
        catch (Exception e)
        {
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
        }
    }

    private async Task ButtonUndo()
    {
        try
        {
            if (_hubConnection != null)
            {
                await _hubConnection.SendAsync("ButtonUndo");
            }
        }
        catch (Exception e)
        {
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
        }
    }
}