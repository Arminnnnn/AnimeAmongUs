@page "/CharactersPage"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using WebApp.Client.Models
@inject Services.ICharacterService characterService

<PageTitle>Characters</PageTitle>

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
    <div class="d-flex align-items-center justify-content-between mb-5 mt-2">
        <h1 class="display-1">Characters</h1>
        <div>
            <a href="/CharacterAdd">
                <button type="button" class="btn btn-warning rounded-pill">
                    <h1>Add</h1>
                </button>
            </a>
            <a href="/">
                <button type="button" class="btn btn-warning rounded-pill">
                    <h1>Exit</h1>
                </button>
            </a>
        </div>
    </div>
</Animate>

@if (_currentPageStatus == PageStatus.Finished && _characters != null)
{
    <Animate Animation="Animations.FadeIn">
        <div class="input-group-lg">
            <input class="form-control rounded-pill fw-bold border-0" style="width: 20rem" placeholder="Search" value="@_inputSearch" @onchange="SearchCharacter"/>
        </div>
    </Animate>
    <hr/>
    
    @foreach (var character in _characters)
    {
        <Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(1)">
            <a href="/characterDetail/@character.Id" class="text-decoration-none">
                <div class="d-flex align-items-center justify-content-between m-2">
                    <div>
                        <h1>@character.CharacterName</h1>
                        <h1>@character.AnimeTitel</h1>
                    </div>
                    <img src=@character.ImageUrl alt="Image of @character.CharacterName"
                         class="border border-white border-5 rounded" 
                         style="height: 10rem; object-fit: cover"/>
                </div>
            </a>
            <hr/>
        </Animate>
    }
}
else if (_currentPageStatus == PageStatus.Loading)
{
    <h1 class="d-flex justify-content-center">Loading...</h1>
}
else if(_currentPageStatus == PageStatus.NotFound)
{
    <h1 class="d-flex justify-content-center">Something went wrong :(</h1>
}

@code {
    private List<Character> _characters = new();
    private List<Character> _charactersAll = new();
    private string _inputSearch;
    private PageStatus _currentPageStatus = PageStatus.None;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_charactersAll.Count <= 0)
            {
                _currentPageStatus = PageStatus.Loading;
                _charactersAll = await characterService.GetCharacters();
                _characters = _charactersAll.Where(c=> c.Id != "66d753b5ca3c5a2735579554")
                    .OrderBy(c => c.CharacterName).ToList();
                _currentPageStatus = PageStatus.Finished;
                InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception e)
        {
            _currentPageStatus = PageStatus.NotFound;
            Console.WriteLine(e);
        }
    }

    private void SearchCharacter(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        _characters = _charactersAll.Where(c=> c.Id != "66d753b5ca3c5a2735579554")
            .OrderBy(c => c.CharacterName).ToList();
        _inputSearch = e.Value.ToString();

        if(!string.IsNullOrEmpty(_inputSearch))
        {
            _characters = _characters.Where(c => c.CharacterName.ToUpper().Contains(_inputSearch.ToUpper())).ToList();
        }
    }
}