@page "/Game"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using Microsoft.AspNetCore.SignalR.Client
@using WebApp.Client.Models
@using Components
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Game</PageTitle>

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
    <div class="d-flex align-items-center justify-content-between mb-5 mt-2">
        <h1 class="display-1">Game</h1>
        <button type="button" class="btn btn-warning rounded-pill" @onclick="@(() => Navigation.NavigateTo("/"))">
            <h1>Leave</h1>
        </button>
    </div>

    <div class="d-flex justify-content-end">
        <ConnectedCount/>
    </div>
    
    <div class="d-flex justify-content-end">
        <h1>Status: </h1>
        @if (IsConnected)
        {
            <img src="icons/connectedIcon.svg" width="50" alt="connected icon"/>
        }
        else
        {
            <img src="icons/disconnectedIcon.svg" width="50" alt="disconnected icon"/>
        }
    </div>

    <div class="d-flex justify-content-center my-5">
        <button type="button" class="btn btn-warning rounded-pill" disabled="@(!IsConnected)" @onclick="StartGame">
            <h1>Start Game</h1>
        </button>
    </div>
</Animate>

@if (_currentPageStatus == PageStatus.Finished && _displayedCharacter != null)
{
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
        <h1 class="d-flex justify-content-center">Character: @_displayedCharacter.CharacterName</h1>
        <h1 class="d-flex justify-content-center">Anime: @_displayedCharacter.AnimeTitel</h1>
        <div class="d-flex justify-content-center m-3">
            <img src="@_displayedCharacter.ImageUrl" alt="Image of @_displayedCharacter.CharacterName"
                 class="border border-white border-5 rounded" style="height: 20rem; object-fit: cover"/>
        </div>
    </Animate>
}else if (_currentPageStatus == PageStatus.Loading)
{
    <h1 class="d-flex justify-content-center">Loading...</h1>
}else if (_currentPageStatus == PageStatus.NotFound)
{
    <h1 class="d-flex justify-content-center">Something went wrong :(</h1>  
}

@code 
{
    private HubConnection? _hubConnection;
    private Character _displayedCharacter = null!;
    private PageStatus _currentPageStatus = PageStatus.None;

    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gameHub"))
            .Build();

        _hubConnection.On<Character>("ReceiveCharacter", (character) =>
        {
            _displayedCharacter = character;
            if (_displayedCharacter != null)
            {
                _currentPageStatus = PageStatus.Finished;
            }
            
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task StartGame()
    {
        try
        {
            if (_hubConnection != null)
            {
                _currentPageStatus = PageStatus.Loading;
                await _hubConnection.SendAsync("StartGame");
            }
        }
        catch (Exception e)
        {
            _currentPageStatus = PageStatus.NotFound;
            InvokeAsync(StateHasChanged);
            Console.WriteLine(e);
        }
    }
}